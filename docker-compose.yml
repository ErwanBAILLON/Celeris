services:
  database:
    build:
      context: database
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: Celeris-postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal
      - default

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:${BACKEND_PORT}:${BACKEND_PORT}"
    restart: unless-stopped
    container_name: Celeris-backend
    environment:
      DB_HOST: database
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      BACKEND_PORT: ${BACKEND_PORT}
      JWT_SECRET: ${JWT_SECRET}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - internal
      - default

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: Celeris-frontend
    ports:
      - "127.0.0.1:${FRONTEND_PORT}:3000"
    depends_on:
      - database
      - backend
    networks:
      - default

volumes:
  pg_data:

networks:
  default:
    driver: bridge
  internal:
    driver: bridge
    internal: true
